Exmaple 1: (GET API : http://localhost:8080/users)
	Create a User.Java in Entity Package.
		package com.company.department.sapp.entity;
		import java.util.Date;		
		public class User {
			private Integer id;
			private String name;
			private Date birthDate;
			public Integer getId() {
				return id;
			}
			public void setId(Integer id) {
				this.id = id;
			}
			public String getName() {
				return name;
			}
			public void setName(String name) {
				this.name = name;
			}
			public Date getBirthDate() {
				return birthDate;
			}
			public void setBirthDate(Date birthDate) {
				this.birthDate = birthDate;
			}
			@Override
			public String toString() {
				return "User [id=" + id + ", name=" + name + ", birthDate=" + birthDate + "]";
			}
			//Parameterised constructor for all the feilds
			public User(Integer id, String name, Date birthDate) {
					super();
					this.id = id;
					this.name = name;
					this.birthDate = birthDate;
				}			
			}		
	Create UserDaoService.java in Service package.
		package com.company.department.sapp.service;
		import java.util.ArrayList;
		import java.util.Date;
		import java.util.List;
		
		import org.springframework.stereotype.Component;
		
		import com.company.department.sapp.entity.User;
		
		
		@Component
		public class UserDaoService {
			public static int usersCount = 3;
		
			private static List<User> listOfUsers = new ArrayList<>();
		
			// Static block always executes once, at the time of loading the class
			static {
				listOfUsers.add(new User(101, "Andrew", new Date()));
				listOfUsers.add(new User(102, "Peter", new Date()));
				listOfUsers.add(new User(101, "Ricky", new Date()));
			}
		
			// Below method will return the list of all the users
			public List<User> findAll() {
				return listOfUsers;
			}
		}
		
	
	Create UserController.java in controller package
		package com.company.department.sapp.controller;
		import java.util.List;
		import org.springframework.beans.factory.annotation.Autowired;
		import org.springframework.context.annotation.ComponentScan;
		import org.springframework.web.bind.annotation.GetMapping;
		import org.springframework.web.bind.annotation.RestController;

		import com.company.department.sapp.entity.User;
		import com.company.department.sapp.service.UserDaoService;

		@RestController
		@ComponentScan
		public class UserController {

			@Autowired
			private UserDaoService userDaoService;

			// Below method will return the list of all the users
			@GetMapping("/users")
			public List<User> retrieveAllUsers() {
				return userDaoService.findAll();
			}
		}
Exmaple 2: (Post API : http://localhost:8080/addUsers)
	Controller:
		//Below method will add the specific User to the existing user's list
		@PostMapping("/addUsers")
		public User addUser(@RequestBody User user){
			return userDaoService.save(user);
		}
	Service:
			public User save(User user) {
			if (user.getId() == null) {
				user.setId(++usersCount);
			}
			listOfUsers.add(user);
			return user;
		}
		Put following in the request Body:
		{
			"name": "D1",
			"birthDate": "2019-01-16T17:11:07.435+0000"
		}
Example 3:  Extend this post API with URI concept which will give us confirmation that user has been created and you can check on this URL
			Add These 2 methods in Controller:
				@PostMapping("/UsersWithURI")
				public ResponseEntity<Object> addUserWithResponse(@RequestBody User user){
					User savedUser= userDaoService.save(user);
					 
					URI location = ServletUriComponentsBuilder
							.fromCurrentRequest()
							.path("/{id}")
							.buildAndExpand(savedUser.getId())
							.toUri();
					
					return ResponseEntity.created(location).build();			
					}
				
					@GetMapping("/UsersWithURI/{id}")
					public User retrieveUser(@PathVariable int id){
						User user = userDaoService.findOne(id);			
						return user;
					}
			
			Add this method in Service:
					public User findOne(int id) {
					for (User user : listOfUsers) {
						if (user.getId() == id) {
							return user;
						}
					}
					return null;
				}
				
			Now if you execute post Request http://localhost:8080/UsersWithURI
			with body as :
				{
					"name": "D1",
					"birthDate": "2019-01-16T17:11:07.435+0000"
				}
			this will not give you any output, but if you go to Headers, it will give you location like : location â†’http://localhost:8080/UsersWithURI/5
			and now if you hit the URL you will get the newly added user.
			
			and you will get the status as 201 created... which is more reliable status than 200 status HTTP OK
		
Exmaple 4: With Exception Response ...
		Add the exception response template class in Response package: ExcpetionResponse	
			package com.company.department.sapp.response;
			import java.util.Date;
			public class ExcpetionResponse {

				private Date timeStamp;
				private String message;
				private String details;
				
				public ExcpetionResponse(Date timeStamp, String message, String details) {
					super();
					this.timeStamp = timeStamp;
					this.message = message;
					this.details = details;
				}
				
				public Date getTimeStamp() {
					return timeStamp;
				}
				public void setTimeStamp(Date timeStamp) {
					this.timeStamp = timeStamp;
				}
				public String getMessage() {
					return message;
				}
				public void setMessage(String message) {
					this.message = message;
				}
				public String getDetails() {
					return details;
				}
				public void setDetails(String details) {
					this.details = details;
				}	
			}
		Add CustomizedExceptionhandler.java and UserNotfoundException.java in Exception Package
			@ControllerAdvice
			@Controller
			public class CustomizedExceptionhandler extends ResponseEntityExceptionHandler{

				@ExceptionHandler(Exception.class)
				public final ResponseEntity<Object> handleAllException(Exception ex,WebRequest request){
					ExcpetionResponse excpetionResponse = new ExcpetionResponse(new Date(),ex.getMessage(),request.getDescription(false));
					
					return new ResponseEntity(excpetionResponse,HttpStatus.INTERNAL_SERVER_ERROR);
					
				}
			@ResponseStatus(HttpStatus.NOT_FOUND)
			public class UserNotfoundException extends RuntimeException {

				public UserNotfoundException(String message) {
					super(message);
					// TODO Auto-generated constructor stub
				}
		
		Change this method		
				@GetMapping("/UsersWithURI/{id}")
				public User retrieveUser(@PathVariable int id){
					User user = userDaoService.findOne(id);		
					if(user==null)
						throw new UserNotfoundException("User is not found for Id "+id);
					return user;
				}
				Now before if you hit the URL for user not found, it would be give you NULL value and status is 200 OK.
				But now if you give this URL  : http://localhost:8080/UsersWithURI/5   -- user 5 is non existing
				it will give you proper JSON error message
				{
					"timeStamp": "2019-01-16T17:47:52.253+0000",
					"message": "User is not found for Id 5",
					"details": "uri=/UsersWithURI/5"
				}
				and status is 500 internal server error.
				
			So this is the standard way for handling the errors or exception.		
Example 5: Add Swagger
		Add these 2 dependancies in XML
		
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger-ui</artifactId>
			<version>2.4.0</version>
		</dependency>
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger2</artifactId>
			<version>2.4.0</version>
		</dependency>
		
		Create a new package - configuration
		Add a SwaggerConfiguration class
		
		package com.company.department.sapp.configuration;

		import java.util.Arrays;
		import java.util.HashSet;
		import java.util.Set;

		import org.springframework.context.annotation.Bean;
		import org.springframework.context.annotation.Configuration;

		import springfox.documentation.service.ApiInfo;
		import springfox.documentation.service.Contact;
		import springfox.documentation.spi.DocumentationType;
		import springfox.documentation.spring.web.plugins.Docket;
		import springfox.documentation.swagger2.annotations.EnableSwagger2;

		@Configuration
		@EnableSwagger2
		public class SwaggerConfiguration {
			
			private static final Contact DEFAULT_CONTACT_INFO = new Contact("Mitesh Upadhyay", "MiteshAPI", "upadhyaymitesh91@gmail.com");
			private static final ApiInfo DEFAULT_API_INFO = new ApiInfo("REST API by Mitesh", "Sample REST API with Spring Boot", "1.0", "termsOfServiceUrl", 
					DEFAULT_CONTACT_INFO, "license", "licenseUrl");
			private static final Set<String> DEFAULT_PRODUCES_AND_CONSUMES = new HashSet<>(Arrays.asList("application/json","application/xml"));


			//Documentation Type that we needed
			@Bean
			public Docket api() {
				return new Docket(DocumentationType.SWAGGER_2);
			}
			
		//	@Bean
		//	public Docket api() {
		//		return new Docket(DocumentationType.SWAGGER_2)
		//				.apiInfo(DEFAULT_API_INFO)
		//				.produces(DEFAULT_PRODUCES_AND_CONSUMES)
		//				.consumes(DEFAULT_PRODUCES_AND_CONSUMES);
		//	}
			
		}

		
		Now try out this swagger URL : http://localhost:8080/swagger-ui.html#/user-controller
	
		More about swagger on this : https://www.vojtechruzicka.com/documenting-spring-boot-rest-api-swagger-springfox/
		
		
		
Example 6: Spring Annotation Validation
		   I was not able to validate this annotation
Example 7: Filter controller - some times we do not want to show all the values in the output, and hence we use the filter bean.
		   Create a new class - FilterBean		   
			{
			   package com.company.department.sapp.bean;
				import com.fasterxml.jackson.annotation.JsonIgnore;
				public class FilterBean {
					public String country;
					public String city;					
					@JsonIgnore
					public int countryCode;
					
					public FilterBean(String country, String city, int countryCode) {

						this.country=country;
						this.city=city;
						this.countryCode=countryCode;
						
					}
					public String getCountry() {
						return country;
					}

					public void setCountry(String country) {
						this.country = country;
					}

					public String getCity() {
						return city;
					}

					public void setCity(String city) {
						this.city = city;
					}

					public int getCountryCode() {
						return countryCode;
					}

					public void setCountryCode(int countryCode) {
						this.countryCode = countryCode;
					}
				}
			}
			Now create a controller
				package com.company.department.sapp.controller;
			   
				import java.util.Arrays;
				import java.util.List;

				import org.springframework.http.converter.json.MappingJacksonValue;
				import org.springframework.web.bind.annotation.GetMapping;
				import org.springframework.web.bind.annotation.RestController;

				import com.company.department.sapp.bean.FilterBean;
				import com.fasterxml.jackson.databind.ser.FilterProvider;
				import com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter;
				import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;

				@RestController
				public class FilterController {

					@GetMapping("/filtering")
					public FilterBean filterBean() {
						return new FilterBean("India","Pune",411014);
					}
					
					
					@GetMapping("/filtering-list")
					public List<FilterBean> filterBeanList() {
						return Arrays.asList(new FilterBean("India","Pune",411014),
										new FilterBean("India","Pune",411014));
					}
					
					@GetMapping("/dynamicFiltering")
					public MappingJacksonValue dynamicFilterBean() {
						
						FilterBean filterBean=new FilterBean("India","Pune",411014);
						
						SimpleBeanPropertyFilter filter=SimpleBeanPropertyFilter.filterOutAllExcept("country");
						
						FilterProvider filters=new SimpleFilterProvider().addFilter("MyFilterBean", filter);
						
						MappingJacksonValue jacksonValue=new MappingJacksonValue(filterBean);
							jacksonValue.setFilters(filters);
							
						return jacksonValue;	
					}
				}
	

Example 8 : Versioning -- I need to understand more on this.

Example 9 :
	JPA
	

		